(()=>{"use strict";document.getElementById("insert-node-start"),document.getElementById("insert-node-end"),document.getElementById("ll-container"),new(function(){function e(){var e=this;this.head=null,this.removeNodeBtn=$("#remove-node-btn")[0],this.sizeDisplay=$("#size-display")[0],this.llContainer=$("#ll-container")[0],this.insertNodeAtIndexBtn=$("#insert-at-location")[0],this.size=$(this.llContainer).children(".node_container").length,this.sizeDisplay.textContent=this.size.toString(),$(this.insertNodeAtIndexBtn).on("click",(function(n){n.stopPropagation();var t=$("#insert-value-input"),i=parseInt(t.val()),o=$("#insert-index-input"),r=parseInt(o.val());e.insertAtIndex(i,r)})),$(this.removeNodeBtn).on("click",(function(n){try{n.stopPropagation();var t=parseInt($("#remove-index-input").val()),i=parseInt($("#remove-value-input").val());t&&e.removeFrom(t),i&&e.removeElement(i)}catch(e){console.log(e)}}))}return e.prototype.updateSize=function(){this.sizeDisplay.textContent=this.size.toString()},e.prototype.insertAtIndex=function(e,n){var t=this;if(!e)throw new Error("Invalid value");try{if(n>=2)this.walkthroughAnimation(n,(function(){var i=t.createLLDomNode(e);if(0===$(t.llContainer).children(".node_container").length)$(t.llContainer).children().first().after(i);else{if(n<0||n>t.size+1)throw new Error("invalid linkedList index");$(t.llContainer.children[0===n?1:n]).before(i)}t.size++,t.updateSize()}));else{var i=this.createLLDomNode(e);if(0===$(this.llContainer).children(".node_container").length)$(this.llContainer).children().first().after(i);else{if(n<0||n>this.size+1)throw new Error("invalid linkedList index");$(this.llContainer.children[0===n?1:n]).before(i)}this.size++,this.updateSize()}}catch(e){console.log(e)}},e.prototype.walkthroughAnimation=function(e,n){var t=$(".walkthrough-animation"),i=!1;t.each((function(t){if(e-1===t&&(i=!0),!i){var o=$(this);o.delay(800*t).animate({transform:"scale(1.2)",rotate:"5deg"},200,(function(){o.animate({transform:"scale(1)",rotate:"0deg"},200,(function(){console.log("insertionIndex = "+(e-1)),console.log("animationIndex = "+(t+1)),e-1===t+1&&n()}))}))}}))},e.prototype.removeElement=function(e){var n=$(this.llContainer).find("*:contains('"+e+"')").filter((function(){return 0===$(this).children().length}));console.log(n.parent().parent().parent().remove()),this.size--,this.updateSize()},e.prototype.removeFrom=function(e){if(e&&e>0){if($(this.llContainer).children().length<=2||e>this.size)throw new Error("there are no nodes inserted yet");$(this.llContainer).children().eq(e).remove(),this.size--,this.updateSize()}},e.prototype.createLLDomNode=function(e){var n=$("<div>").addClass("node_container walkthrough-animation"),t=$("<div>").addClass("node_inner_container"),i=$("<div>").addClass("node_data"),o=$("<p>").text(e.toString());i.append(o);var r=$("<div>").addClass("node_next_container"),a=$("<div>").addClass("node_next"),s=$("<div>").addClass("arrow-container"),l=$("<div>").addClass("arrow"),d=$("<div>").addClass("line");return s.append(l,d),a.append(s),r.append(a),t.append(i,r),n.append(t),n},e}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,